---
// Password Reset Page for MyMeetings
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/x-icon" href="/myMeetings.ico" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Primary Meta Tags -->
		<title>Reset Password - MyMeetings: AA Companion</title>
		<meta name="title" content="Reset Password - MyMeetings: AA Companion" />
		<meta name="description" content="Reset your MyMeetings password to continue your recovery journey." />
		<meta name="robots" content="noindex, nofollow" />
		
		<!-- Theme -->
		<meta name="theme-color" content="#4CAF50" />
		<meta name="msapplication-TileColor" content="#4CAF50" />
		
		<style>
			@font-face {
				font-family: 'SF Pro Display';
				src: url('/fonts/SFPRODISPLAYREGULAR.OTF') format('opentype');
				font-display: swap;
			}
			
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			html {
				scroll-behavior: smooth;
			}
			
			body {
				font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				line-height: 1.6;
				color: #333;
				background: linear-gradient(180deg, #fafafc 0%, #e8eaed 25%, #e8eaed 50%, #e8eaed 75%, #e8eaed 100%);
				min-height: 100vh;
				display: flex;
				align-items: center;
				justify-content: center;
				padding: 2rem;
			}
			
			.container {
				max-width: 500px;
				width: 100%;
				background: rgba(255, 255, 255, 0.95);
				backdrop-filter: blur(20px);
				border-radius: 20px;
				box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
				overflow: hidden;
				border: 1px solid rgba(255, 255, 255, 0.3);
			}
			
			.header {
				background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
				padding: 2.5rem 2rem 2rem;
				text-align: center;
				color: white;
				position: relative;
				overflow: hidden;
			}
			
			.header::before {
				content: '';
				position: absolute;
				top: -50%;
				right: -50%;
				width: 100%;
				height: 100%;
				background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
				transform: rotate(45deg);
			}
			
			.logo-container {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 1rem;
				margin-bottom: 1rem;
				position: relative;
				z-index: 2;
			}
			
			.logo-image {
				height: 50px;
				width: auto;
				object-fit: contain;
				filter: brightness(0) invert(1);
			}
			
			.logo {
				font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				font-size: 2rem;
				font-weight: bold;
				color: white;
			}
			
			.header h1 {
				font-size: 1.8rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				position: relative;
				z-index: 2;
			}
			
			.header p {
				font-size: 1rem;
				opacity: 0.9;
				position: relative;
				z-index: 2;
			}
			
			.form-container {
				padding: 2.5rem 2rem;
			}
			
			.form-group {
				margin-bottom: 1.5rem;
			}
			
			.form-group label {
				display: block;
				margin-bottom: 0.5rem;
				font-weight: 600;
				color: #011A27;
				font-size: 0.95rem;
			}
			
			.form-group input {
				width: 100%;
				padding: 1rem 1.2rem;
				border: 2px solid #e2e8f0;
				border-radius: 12px;
				font-size: 1rem;
				font-family: inherit;
				transition: all 0.3s ease;
				background: white;
			}
			
			.form-group input:focus {
				outline: none;
				border-color: #4CAF50;
				box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
			}
			
			.password-strength {
				margin-top: 0.5rem;
				font-size: 0.85rem;
				color: #6b7280;
			}
			
			.strength-indicator {
				display: flex;
				gap: 0.25rem;
				margin-top: 0.5rem;
			}
			
			.strength-bar {
				height: 4px;
				flex: 1;
				background: #e5e7eb;
				border-radius: 2px;
				transition: background-color 0.3s ease;
			}
			
			.strength-bar.active {
				background: #4CAF50;
			}
			
			.strength-bar.medium {
				background: #fbbf24;
			}
			
			.strength-bar.weak {
				background: #ef4444;
			}
			
			.submit-button {
				width: 100%;
				background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
				color: white;
				padding: 1.2rem 2rem;
				border: none;
				border-radius: 12px;
				font-size: 1.1rem;
				font-weight: 600;
				font-family: inherit;
				cursor: pointer;
				transition: all 0.3s ease;
				box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
			}
			
			.submit-button:hover:not(:disabled) {
				transform: translateY(-2px);
				box-shadow: 0 6px 16px rgba(76, 175, 80, 0.4);
			}
			
			.submit-button:disabled {
				opacity: 0.6;
				cursor: not-allowed;
				transform: none;
			}
			
			.error-message {
				background: #fef2f2;
				color: #dc2626;
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1.5rem;
				border: 1px solid #fecaca;
				font-size: 0.9rem;
			}
			
			.success-message {
				background: #f0fdf4;
				color: #16a34a;
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1.5rem;
				border: 1px solid #bbf7d0;
				font-size: 0.9rem;
			}
			
			.loading {
				display: inline-block;
				width: 18px;
				height: 18px;
				border: 2px solid rgba(255, 255, 255, 0.3);
				border-top: 2px solid white;
				border-radius: 50%;
				animation: spin 1s linear infinite;
				margin-right: 0.5rem;
			}
			
			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}
			
			.back-link {
				text-align: center;
				margin-top: 1.5rem;
				padding-top: 1.5rem;
				border-top: 1px solid #e5e7eb;
			}
			
			.back-link a {
				color: #4CAF50;
				text-decoration: none;
				font-weight: 500;
				transition: color 0.3s ease;
			}
			
			.back-link a:hover {
				color: #45a049;
				text-decoration: underline;
			}
			
			.hidden {
				display: none;
			}
			
			@media (max-width: 640px) {
				body {
					padding: 1rem;
				}
				
				.container {
					margin: 0;
				}
				
				.header {
					padding: 2rem 1.5rem 1.5rem;
				}
				
				.form-container {
					padding: 2rem 1.5rem;
				}
				
				.logo {
					font-size: 1.8rem;
				}
				
				.header h1 {
					font-size: 1.6rem;
				}
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<div class="logo-container">
					<img src="/MyMeetingsAppLogoTransperant.png" alt="MyMeetings Logo" class="logo-image" />
					<div class="logo">MyMeetings</div>
				</div>
				<h1>Reset Your Password</h1>
				<p>Enter your new password to regain access to your account</p>
			</div>
			
			<div class="form-container">
				<div id="errorMessage" class="error-message hidden"></div>
				<div id="successMessage" class="success-message hidden"></div>
				
				<form id="resetPasswordForm">
					<div class="form-group">
						<label for="newPassword">New Password</label>
						<input 
							type="password" 
							id="newPassword" 
							name="newPassword" 
							required 
							minlength="8"
							placeholder="Enter your new password"
						/>
						<div class="password-strength">
							<div id="strengthText">Password must be at least 8 characters</div>
							<div class="strength-indicator">
								<div class="strength-bar" id="bar1"></div>
								<div class="strength-bar" id="bar2"></div>
								<div class="strength-bar" id="bar3"></div>
								<div class="strength-bar" id="bar4"></div>
							</div>
						</div>
					</div>
					
					<div class="form-group">
						<label for="confirmPassword">Confirm New Password</label>
						<input 
							type="password" 
							id="confirmPassword" 
							name="confirmPassword" 
							required 
							minlength="8"
							placeholder="Confirm your new password"
						/>
					</div>
					
					<button type="submit" class="submit-button" id="submitButton">
						Reset Password
					</button>
				</form>
				
				<div class="back-link">
					<a href="/myMeetings">‚Üê Back to MyMeetings</a>
				</div>
			</div>
		</div>

		<script>
			let resetToken = null;

			// Get token from URL parameters
			document.addEventListener('DOMContentLoaded', function() {
				const urlParams = new URLSearchParams(window.location.search);
				resetToken = urlParams.get('token');
				
				if (!resetToken) {
					showError('Invalid or missing reset token. Please request a new password reset link.');
					document.getElementById('resetPasswordForm').style.display = 'none';
					return;
				}
			});

			// Password strength checker
			document.getElementById('newPassword').addEventListener('input', function(e) {
				const password = e.target.value;
				checkPasswordStrength(password);
			});

			function checkPasswordStrength(password) {
				const strengthText = document.getElementById('strengthText');
				const bars = [
					document.getElementById('bar1'),
					document.getElementById('bar2'),
					document.getElementById('bar3'),
					document.getElementById('bar4')
				];

				// Reset bars
				bars.forEach(bar => {
					bar.classList.remove('active', 'medium', 'weak');
				});

				let strength = 0;
				let feedback = [];

				// Length check
				if (password.length >= 8) {
					strength++;
				} else {
					feedback.push('at least 8 characters');
				}

				// Uppercase check
				if (/[A-Z]/.test(password)) {
					strength++;
				} else {
					feedback.push('uppercase letter');
				}

				// Lowercase check
				if (/[a-z]/.test(password)) {
					strength++;
				} else {
					feedback.push('lowercase letter');
				}

				// Number or special character check
				if (/[0-9]/.test(password) || /[^A-Za-z0-9]/.test(password)) {
					strength++;
				} else {
					feedback.push('number or special character');
				}

				// Update bars
				for (let i = 0; i < strength; i++) {
					bars[i].classList.add('active');
					if (strength <= 2) {
						bars[i].classList.add('weak');
					} else if (strength === 3) {
						bars[i].classList.add('medium');
					}
				}

				// Update text
				if (password.length === 0) {
					strengthText.textContent = 'Password must be at least 8 characters';
				} else if (strength === 4) {
					strengthText.textContent = 'Strong password';
					strengthText.style.color = '#16a34a';
				} else if (strength === 3) {
					strengthText.textContent = 'Good password';
					strengthText.style.color = '#fbbf24';
				} else {
					strengthText.textContent = `Needs: ${feedback.join(', ')}`;
					strengthText.style.color = '#dc2626';
				}
			}

			// Form submission
			document.getElementById('resetPasswordForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const newPassword = document.getElementById('newPassword').value;
				const confirmPassword = document.getElementById('confirmPassword').value;
				
				// Validation
				if (newPassword !== confirmPassword) {
					showError('Passwords do not match');
					return;
				}
				
				if (newPassword.length < 8) {
					showError('Password must be at least 8 characters long');
					return;
				}
				
				if (!resetToken) {
					showError('Invalid reset token');
					return;
				}
				
				await handlePasswordReset(resetToken, newPassword);
			});

			async function handlePasswordReset(token, newPassword) {
				const submitButton = document.getElementById('submitButton');
				
				try {
					hideMessages();
					setLoading(true);
					
					const response = await fetch('https://api.gskis.com/api/auth/reset-password', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({
							token: token,
							newPassword: newPassword
						})
					});
					
					const data = await response.json();
					
					if (!response.ok) {
						throw new Error(data.error || 'Failed to reset password');
					}
					
					showSuccess('Password reset successfully! You can now sign in with your new password.');
					
					// Hide form and show redirect message
					setTimeout(() => {
						showSuccess('Redirecting to MyMeetings...');
						setTimeout(() => {
							window.location.href = '/myMeetings';
						}, 2000);
					}, 2000);
					
				} catch (error) {
					showError(error.message);
				} finally {
					setLoading(false);
				}
			}

			function showError(message) {
				const errorDiv = document.getElementById('errorMessage');
				const successDiv = document.getElementById('successMessage');
				
				successDiv.classList.add('hidden');
				errorDiv.textContent = message;
				errorDiv.classList.remove('hidden');
			}

			function showSuccess(message) {
				const errorDiv = document.getElementById('errorMessage');
				const successDiv = document.getElementById('successMessage');
				
				errorDiv.classList.add('hidden');
				successDiv.textContent = message;
				successDiv.classList.remove('hidden');
			}

			function hideMessages() {
				document.getElementById('errorMessage').classList.add('hidden');
				document.getElementById('successMessage').classList.add('hidden');
			}

			function setLoading(loading) {
				const submitButton = document.getElementById('submitButton');
				
				if (loading) {
					submitButton.disabled = true;
					submitButton.innerHTML = '<span class="loading"></span>Resetting Password...';
				} else {
					submitButton.disabled = false;
					submitButton.innerHTML = 'Reset Password';
				}
			}
		</script>
	</body>
</html>
