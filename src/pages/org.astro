---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/x-icon" href="/myMeetings.ico" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Primary Meta Tags -->
		<title>Organization Management - MyMeetings</title>
		<meta name="title" content="Organization Management - MyMeetings Admin Dashboard" />
		<meta name="description" content="Manage your recovery organizations, members, and settings through the MyMeetings admin dashboard." />
		<meta name="robots" content="noindex, nofollow" />
		
		<style>
			@font-face {
				font-family: 'SF Pro Display';
				src: url('/fonts/SFPRODISPLAYREGULAR.OTF') format('opentype');
				font-display: swap;
			}
			
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			html {
				scroll-behavior: smooth;
			}
			
			body {
				font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				line-height: 1.6;
				color: #333;
				background: #e8eaed;
				min-height: 100vh;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 2rem;
			}

			/* Header */
			.header {
				background: rgba(255, 255, 255, 0.95);
				backdrop-filter: blur(10px);
				border-bottom: 1px solid rgba(0, 0, 0, 0.1);
				padding: 1rem 0;
				position: sticky;
				top: 0;
				z-index: 100;
			}

			.header-content {
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.logo {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 1.5rem;
				font-weight: bold;
				color: #011A27;
			}

			.user-info {
				display: flex;
				align-items: center;
				gap: 1rem;
			}

			.user-avatar {
				width: 40px;
				height: 40px;
				border-radius: 50%;
				background: #4CAF50;
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				font-weight: bold;
			}

			/* Auth Section */
			.auth-section {
				display: flex;
				justify-content: center;
				align-items: center;
				min-height: 80vh;
			}

			.auth-card {
				background: white;
				border-radius: 16px;
				padding: 2rem;
				box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
				width: 100%;
				max-width: 400px;
			}

			.auth-card h2 {
				text-align: center;
				margin-bottom: 1.5rem;
				color: #011A27;
			}

			/* Dashboard */
			.dashboard {
				padding: 2rem 0;
			}

			.dashboard-header {
				text-align: center;
				margin-bottom: 3rem;
			}

			.dashboard-header h1 {
				font-size: 2.5rem;
				color: #011A27;
				margin-bottom: 0.5rem;
			}

			.dashboard-header p {
				color: #6b7280;
				font-size: 1.1rem;
			}

			/* Tab Navigation */
			.tabs {
				display: flex;
				gap: 1rem;
				margin-bottom: 2rem;
				border-bottom: 2px solid #e5e7eb;
			}

			.tab {
				padding: 1rem 1.5rem;
				background: none;
				border: none;
				font-size: 1rem;
				font-weight: 500;
				color: #6b7280;
				cursor: pointer;
				border-bottom: 2px solid transparent;
				transition: all 0.3s ease;
			}

			.tab.active {
				color: #4CAF50;
				border-bottom-color: #4CAF50;
			}

			.tab:hover {
				color: #4CAF50;
			}

			/* Tab Content */
			.tab-content {
				display: none;
			}

			.tab-content.active {
				display: block;
			}

			/* Cards */
			.card {
				background: white;
				border-radius: 16px;
				padding: 1.5rem;
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
				margin-bottom: 1.5rem;
			}

			.card h3 {
				color: #011A27;
				margin-bottom: 1rem;
				font-size: 1.3rem;
			}

			/* Forms */
			.form-group {
				margin-bottom: 1rem;
			}

			.form-group label {
				display: block;
				margin-bottom: 0.5rem;
				font-weight: 500;
				color: #374151;
			}

			.form-group input,
			.form-group select,
			.form-group textarea {
				width: 100%;
				padding: 0.75rem;
				border: 1px solid #d1d5db;
				border-radius: 8px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
			}

			.form-group input:focus,
			.form-group select:focus,
			.form-group textarea:focus {
				outline: none;
				border-color: #4CAF50;
			}

			/* Color Picker Styling */
			.color-picker-wrapper {
				position: relative;
				width: 100%;
			}

			.color-picker {
				appearance: none;
				-webkit-appearance: none;
				-moz-appearance: none;
				width: 100%;
				height: 50px;
				border: 2px solid #d1d5db;
				border-radius: 12px;
				cursor: pointer;
				transition: all 0.3s ease;
				background: linear-gradient(45deg, transparent 40%, rgba(0,0,0,0.1) 50%, transparent 60%);
				background-size: 8px 8px;
				position: relative;
			}

			.color-picker:hover {
				border-color: #4CAF50;
				transform: translateY(-1px);
				box-shadow: 0 4px 12px rgba(76, 175, 80, 0.15);
			}

			.color-picker:focus {
				outline: none;
				border-color: #4CAF50;
				box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
			}

			.color-display {
				position: absolute;
				top: 50%;
				left: 12px;
				transform: translateY(-50%);
				width: 30px;
				height: 30px;
				border-radius: 8px;
				border: 2px solid white;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
				pointer-events: none;
				z-index: 1;
			}

			.color-label {
				position: absolute;
				top: 50%;
				right: 12px;
				transform: translateY(-50%);
				background: rgba(255, 255, 255, 0.9);
				padding: 4px 8px;
				border-radius: 6px;
				font-size: 0.75rem;
				font-weight: 500;
				color: #374151;
				pointer-events: none;
				z-index: 1;
			}

			/* Buttons */
			.btn {
				padding: 0.75rem 1.5rem;
				border: none;
				border-radius: 8px;
				font-size: 1rem;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.3s ease;
				text-decoration: none;
				display: inline-block;
				text-align: center;
			}

			.btn-primary {
				background: #4CAF50;
				color: white;
			}

			.btn-primary:hover {
				background: #45a049;
				transform: translateY(-1px);
			}

			.btn-secondary {
				background: #6b7280;
				color: white;
			}

			.btn-secondary:hover {
				background: #5b6171;
			}

			.btn-danger {
				background: #ef4444;
				color: white;
			}

			.btn-danger:hover {
				background: #dc2626;
			}

			/* Organization List */
			.org-list {
				display: grid;
				gap: 1rem;
			}

			.org-item {
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: 1rem;
				background: #f9fafb;
				border-radius: 8px;
				border: 1px solid #e5e7eb;
			}

			.org-info {
				display: flex;
				align-items: center;
				gap: 1rem;
			}

			.org-logo {
				width: 40px;
				height: 40px;
				border-radius: 8px;
				background: #4CAF50;
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				font-weight: bold;
			}

			.org-details h4 {
				color: #011A27;
				margin-bottom: 0.25rem;
			}

			.org-details p {
				color: #6b7280;
				font-size: 0.9rem;
			}

			.org-actions {
				display: flex;
				gap: 0.5rem;
			}

			/* Member List */
			.member-list {
				display: grid;
				gap: 0.5rem;
			}

			.member-item {
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: 0.75rem;
				background: #f9fafb;
				border-radius: 8px;
			}

			.member-info {
				display: flex;
				align-items: center;
				gap: 0.75rem;
			}

			.member-avatar {
				width: 32px;
				height: 32px;
				border-radius: 50%;
				background: #4CAF50;
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				font-size: 0.8rem;
				font-weight: bold;
			}

			.role-badge {
				padding: 0.25rem 0.5rem;
				border-radius: 4px;
				font-size: 0.75rem;
				font-weight: 500;
			}

			.role-admin {
				background: #fef2f2;
				color: #991b1b;
			}

			.role-member {
				background: #f0f9ff;
				color: #1e40af;
			}

			.role-viewer {
				background: #f9fafb;
				color: #374151;
			}

			/* Loading and Error States */
			.loading {
				text-align: center;
				padding: 2rem;
				color: #6b7280;
			}

			.error {
				background: #fef2f2;
				color: #991b1b;
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1rem;
			}

			.success {
				background: #f0fdf4;
				color: #166534;
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1rem;
			}

			/* Responsive */
			@media (max-width: 768px) {
				.container {
					padding: 0 1rem;
				}

				.header-content {
					flex-direction: column;
					gap: 1rem;
				}

				.tabs {
					flex-wrap: wrap;
				}

				.org-item,
				.member-item {
					flex-direction: column;
					align-items: flex-start;
					gap: 1rem;
				}

				.org-actions {
					align-self: stretch;
				}
			}

			.hidden {
				display: none !important;
			}
		</style>
	</head>
	<body>
		<header class="header">
			<div class="container">
				<div class="header-content">
					<div class="logo">
						<img src="/myMeetingsLogo.png" alt="MyMeetings" style="height: 32px;">
						Organization Management
					</div>
					<div class="user-info hidden" id="userInfo">
						<div class="user-avatar" id="userAvatar"></div>
						<div>
							<div id="userName"></div>
							<button class="btn btn-secondary" id="logoutBtn">Logout</button>
						</div>
					</div>
				</div>
			</div>
		</header>

		<main class="container">
			<!-- Authentication Section -->
			<section class="auth-section" id="authSection">
				<div class="auth-card">
					<h2>Admin Login</h2>
					<form id="loginForm">
						<div class="form-group">
							<label for="username">Username</label>
							<input type="text" id="username" name="username" required>
						</div>
						<div class="form-group">
							<label for="password">Password</label>
							<input type="password" id="password" name="password" required>
						</div>
						<button type="submit" class="btn btn-primary" style="width: 100%;">Login</button>
					</form>
					<div id="authError" class="error hidden"></div>
				</div>
			</section>

			<!-- Dashboard Section -->
			<section class="dashboard hidden" id="dashboardSection">
				<div class="dashboard-header">
					<h1>Organization Dashboard</h1>
					<p>Manage your recovery organizations, members, and settings</p>
				</div>

				<div id="globalMessage"></div>

				<!-- Tab Navigation -->
				<div class="tabs">
					<button class="tab active" data-tab="organizations">My Organizations</button>
					<button class="tab" data-tab="create">Create Organization</button>
					<button class="tab" data-tab="manage" id="manageTab" style="display: none;">Manage Organization</button>
				</div>

				<!-- Organizations Tab -->
				<div class="tab-content active" id="organizationsTab">
					<div class="card">
						<h3>My Organizations</h3>
						<div id="organizationsList" class="org-list">
							<div class="loading">Loading organizations...</div>
						</div>
					</div>
				</div>

				<!-- Create Organization Tab -->
				<div class="tab-content" id="createTab">
					<div class="card">
						<h3>Create New Organization</h3>
						<form id="createOrgForm">
							<div class="form-group">
								<label for="orgName">Organization Name *</label>
								<input type="text" id="orgName" name="name" required>
							</div>
							<div class="form-group">
								<label for="orgCode">Organization Code * (2-10 characters, alphanumeric)</label>
								<input type="text" id="orgCode" name="orgCode" pattern="[A-Za-z0-9]{2,10}" required>
							</div>
							<div class="form-group">
								<label for="logoUrl">Logo URL</label>
								<input type="url" id="logoUrl" name="logoUrl">
							</div>
							<div class="form-group">
								<label for="primaryColor">Primary Color</label>
								<div class="color-picker-wrapper">
									<input type="color" id="primaryColor" name="primaryColor" value="#4CAF50" class="color-picker">
									<div class="color-display" id="primaryColorDisplay" style="background-color: #4CAF50;"></div>
									<div class="color-label" id="primaryColorLabel">#4CAF50</div>
								</div>
							</div>
							<div class="form-group">
								<label for="secondaryColor">Secondary Color</label>
								<div class="color-picker-wrapper">
									<input type="color" id="secondaryColor" name="secondaryColor" value="#6c757d" class="color-picker">
									<div class="color-display" id="secondaryColorDisplay" style="background-color: #6c757d;"></div>
									<div class="color-label" id="secondaryColorLabel">#6c757d</div>
								</div>
							</div>
							<button type="submit" class="btn btn-primary">Create Organization</button>
						</form>
					</div>
				</div>

				<!-- Manage Organization Tab -->
				<div class="tab-content" id="manageTabContent">
					<div class="card">
						<h3 id="manageOrgTitle">Manage Organization</h3>
						
						<!-- Organization Details -->
						<div id="orgDetails">
							<h4>Organization Details</h4>
							<form id="updateOrgForm">
								<div class="form-group">
									<label for="editOrgName">Organization Name</label>
									<input type="text" id="editOrgName" name="name">
								</div>
								<div class="form-group">
									<label for="editLogoUrl">Logo URL</label>
									<input type="url" id="editLogoUrl" name="logoUrl">
								</div>
								<div class="form-group">
									<label for="editPrimaryColor">Primary Color</label>
									<div class="color-picker-wrapper">
										<input type="color" id="editPrimaryColor" name="primaryColor" class="color-picker">
										<div class="color-display" id="editPrimaryColorDisplay"></div>
										<div class="color-label" id="editPrimaryColorLabel"></div>
									</div>
								</div>
								<div class="form-group">
									<label for="editSecondaryColor">Secondary Color</label>
									<div class="color-picker-wrapper">
										<input type="color" id="editSecondaryColor" name="secondaryColor" class="color-picker">
										<div class="color-display" id="editSecondaryColorDisplay"></div>
										<div class="color-label" id="editSecondaryColorLabel"></div>
									</div>
								</div>
								<button type="submit" class="btn btn-primary">Update Organization</button>
							</form>
						</div>

						<!-- Members Section -->
						<div style="margin-top: 2rem;">
							<h4>Organization Members</h4>
							<div id="membersList" class="member-list">
								<div class="loading">Loading members...</div>
							</div>
						</div>

						<!-- Add Member Section -->
						<div style="margin-top: 2rem;">
							<h4>Add New Member</h4>
							<form id="addMemberForm">
								<div style="display: flex; gap: 1rem; align-items: end;">
									<div class="form-group" style="flex: 1;">
										<label for="memberUserId">User ID</label>
										<input type="number" id="memberUserId" name="userId" required>
									</div>
									<div class="form-group" style="flex: 1;">
										<label for="memberRole">Role</label>
										<select id="memberRole" name="role" required>
											<option value="member">Member</option>
											<option value="admin">Admin</option>
											<option value="viewer">Viewer</option>
										</select>
									</div>
									<button type="submit" class="btn btn-primary">Add Member</button>
								</div>
							</form>
						</div>
					</div>
				</div>
			</section>
		</main>

		<script>
			// Global state
			let currentUser = null;
			let authToken = null;
			let organizations = [];
			let currentOrganization = null;

			// Check for existing token on page load
			document.addEventListener('DOMContentLoaded', function() {
				const savedToken = localStorage.getItem('authToken');
				const savedUser = localStorage.getItem('currentUser');
				
				if (savedToken && savedUser) {
					authToken = savedToken;
					currentUser = JSON.parse(savedUser);
					showDashboard();
					loadOrganizations();
				}

				// Add event listeners for tab buttons
				document.querySelectorAll('.tab').forEach(tab => {
					tab.addEventListener('click', function() {
						const tabName = this.getAttribute('data-tab');
						switchTab(tabName);
					});
				});

				// Add event listener for logout button
				const logoutBtn = document.getElementById('logoutBtn');
				if (logoutBtn) {
					logoutBtn.addEventListener('click', logout);
				}

				// Add event listeners for color pickers
				setupColorPickers();
			});

			// Color picker setup
			function setupColorPickers() {
				const primaryColorInput = document.getElementById('primaryColor');
				const secondaryColorInput = document.getElementById('secondaryColor');
				const editPrimaryColorInput = document.getElementById('editPrimaryColor');
				const editSecondaryColorInput = document.getElementById('editSecondaryColor');
				
				if (primaryColorInput) {
					primaryColorInput.addEventListener('input', function() {
						updateColorDisplay('primary', this.value);
					});
				}
				
				if (secondaryColorInput) {
					secondaryColorInput.addEventListener('input', function() {
						updateColorDisplay('secondary', this.value);
					});
				}

				if (editPrimaryColorInput) {
					editPrimaryColorInput.addEventListener('input', function() {
						updateColorDisplay('editPrimary', this.value);
					});
				}
				
				if (editSecondaryColorInput) {
					editSecondaryColorInput.addEventListener('input', function() {
						updateColorDisplay('editSecondary', this.value);
					});
				}
			}

			function updateColorDisplay(colorType, colorValue) {
				const display = document.getElementById(colorType + 'ColorDisplay');
				const label = document.getElementById(colorType + 'ColorLabel');
				
				if (display) {
					display.style.backgroundColor = colorValue;
				}
				
				if (label) {
					label.textContent = colorValue.toUpperCase();
				}
			}

			// Authentication
			document.getElementById('loginForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const formData = new FormData(e.target);
				const credentials = {
					username: formData.get('username'),
					password: formData.get('password')
				};

				try {
					const response = await fetch('https://api.gskis.com/api/auth/login', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(credentials)
					});

					const data = await response.json();

					if (response.ok) {
						currentUser = data.user;
						authToken = data.token;
						
						// Store in localStorage
						localStorage.setItem('authToken', authToken);
						localStorage.setItem('currentUser', JSON.stringify(currentUser));
						
						showDashboard();
						loadOrganizations();
						showMessage('Login successful!', 'success');
					} else {
						showAuthError(data.error || 'Login failed');
					}
				} catch (error) {
					showAuthError('Network error. Please try again.');
				}
			});

			function logout() {
				currentUser = null;
				authToken = null;
				localStorage.removeItem('authToken');
				localStorage.removeItem('currentUser');
				
				document.getElementById('authSection').classList.remove('hidden');
				document.getElementById('dashboardSection').classList.add('hidden');
				document.getElementById('userInfo').classList.add('hidden');
				
				// Reset forms
				document.getElementById('loginForm').reset();
				clearAuthError();
			}

			function showDashboard() {
				document.getElementById('authSection').classList.add('hidden');
				document.getElementById('dashboardSection').classList.remove('hidden');
				document.getElementById('userInfo').classList.remove('hidden');
				
				// Update user info
				document.getElementById('userName').textContent = currentUser.name || currentUser.username;
				document.getElementById('userAvatar').textContent = (currentUser.name || currentUser.username).charAt(0).toUpperCase();
				
				clearAuthError();
			}

			function showAuthError(message) {
				const errorDiv = document.getElementById('authError');
				errorDiv.textContent = message;
				errorDiv.classList.remove('hidden');
			}

			function clearAuthError() {
				document.getElementById('authError').classList.add('hidden');
			}

			// Tab switching
			function switchTab(tabName) {
				// Update tab buttons
				document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
				
				// Find and activate the correct tab button based on the tabName
				const activeTab = document.querySelector(`.tab[data-tab="${tabName}"]`);
				if (activeTab) {
					activeTab.classList.add('active');
				}

				// Update tab content
				document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
				
				// Handle different tab content IDs
				let contentId;
				if (tabName === 'manage') {
					contentId = 'manageTabContent';
				} else {
					contentId = tabName + 'Tab';
				}
				
				const tabContent = document.getElementById(contentId);
				if (tabContent) {
					tabContent.classList.add('active');
				}

				// Load data if needed
				if (tabName === 'manage' && currentOrganization) {
					loadOrganizationDetails(currentOrganization.id);
				}
			}

			// API Helper
			async function apiRequest(url, options = {}) {
				const defaultOptions = {
					headers: {
						'Content-Type': 'application/json',
						'Authorization': `Bearer ${authToken}`
					}
				};

				const mergedOptions = {
					...defaultOptions,
					...options,
					headers: {
						...defaultOptions.headers,
						...options.headers
					}
				};

				const response = await fetch(url, mergedOptions);
				const data = await response.json();

				if (!response.ok) {
					throw new Error(data.error || 'API request failed');
				}

				return data;
			}

			// Organizations
			async function loadOrganizations() {
				try {
					const orgs = await apiRequest(`https://api.gskis.com/api/users/${currentUser.id}/organizations`);
					organizations = orgs;
					renderOrganizations();
				} catch (error) {
					showMessage('Failed to load organizations: ' + error.message, 'error');
				}
			}

			function renderOrganizations() {
				const container = document.getElementById('organizationsList');
				
				if (organizations.length === 0) {
					container.innerHTML = '<p>No organizations found. Create your first organization!</p>';
					return;
				}

				container.innerHTML = organizations.map(org => {
					const membership = org.OrganizationMemberships[0];
					const role = membership.role;
					
					return `
						<div class="org-item">
							<div class="org-info">
								<div class="org-logo" style="background-color: ${org.primaryColor || '#4CAF50'}">
									${org.name.charAt(0).toUpperCase()}
								</div>
								<div class="org-details">
									<h4>${org.name}</h4>
									<p>Code: ${org.orgCode} • Role: <span class="role-badge role-${role}">${role}</span></p>
								</div>
							</div>
							<div class="org-actions">
								<button class="btn btn-primary" onclick="manageOrganization(${org.id})">
									${role === 'admin' ? 'Manage' : 'View'}
								</button>
							</div>
						</div>
					`;
				}).join('');
			}

			function manageOrganization(orgId) {
				const org = organizations.find(o => o.id === orgId);
				if (!org) return;

				currentOrganization = org;
				const manageTabButton = document.querySelector('#manageTab');
				if (manageTabButton) {
					manageTabButton.style.display = 'block';
				}
				switchTab('manage');
				loadOrganizationDetails(orgId);
			}

			// Make functions globally accessible for inline handlers
			window.manageOrganization = manageOrganization;

			async function loadOrganizationDetails(orgId) {
				try {
					const org = await apiRequest(`https://api.gskis.com/api/organizations/${orgId}`);
					renderOrganizationDetails(org);
				} catch (error) {
					showMessage('Failed to load organization details: ' + error.message, 'error');
				}
			}

			function renderOrganizationDetails(org) {
				document.getElementById('manageOrgTitle').textContent = `Manage ${org.name}`;
				
				// Fill form with current values
				document.getElementById('editOrgName').value = org.name;
				document.getElementById('editLogoUrl').value = org.logoUrl || '';
				
				const primaryColor = org.primaryColor || '#4CAF50';
				const secondaryColor = org.secondaryColor || '#6c757d';
				
				document.getElementById('editPrimaryColor').value = primaryColor;
				document.getElementById('editSecondaryColor').value = secondaryColor;

				// Update color displays
				updateColorDisplay('editPrimary', primaryColor);
				updateColorDisplay('editSecondary', secondaryColor);

				// Render members
				const membersContainer = document.getElementById('membersList');
				membersContainer.innerHTML = org.OrganizationMemberships.map(membership => {
					const user = membership.User;
					return `
						<div class="member-item">
							<div class="member-info">
								<div class="member-avatar">
									${(user.name || user.username).charAt(0).toUpperCase()}
								</div>
								<div>
									<strong>${user.name || user.username}</strong>
									<br>
									<small>User ID: ${user.id}</small>
								</div>
							</div>
							<div style="display: flex; align-items: center; gap: 1rem;">
								<span class="role-badge role-${membership.role}">${membership.role}</span>
								${isAdmin() ? `
									<select onchange="updateMemberRole(${user.id}, this.value)">
										<option value="viewer" ${membership.role === 'viewer' ? 'selected' : ''}>Viewer</option>
										<option value="member" ${membership.role === 'member' ? 'selected' : ''}>Member</option>
										<option value="admin" ${membership.role === 'admin' ? 'selected' : ''}>Admin</option>
									</select>
									<button class="btn btn-danger" onclick="removeMember(${user.id})">Remove</button>
								` : ''}
							</div>
						</div>
					`;
				}).join('');
			}

			function isAdmin() {
				if (!currentOrganization) return false;
				const membership = organizations.find(o => o.id === currentOrganization.id)?.OrganizationMemberships[0];
				return membership?.role === 'admin';
			}

			// Create Organization
			document.getElementById('createOrgForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const formData = new FormData(e.target);
				const orgData = {
					name: formData.get('name'),
					orgCode: formData.get('orgCode'),
					logoUrl: formData.get('logoUrl') || undefined,
					primaryColor: formData.get('primaryColor'),
					secondaryColor: formData.get('secondaryColor')
				};

				try {
					const newOrg = await apiRequest('https://api.gskis.com/api/organizations', {
						method: 'POST',
						body: JSON.stringify(orgData)
					});

					showMessage('Organization created successfully!', 'success');
					e.target.reset();
					loadOrganizations();
				} catch (error) {
					showMessage('Failed to create organization: ' + error.message, 'error');
				}
			});

			// Update Organization
			document.getElementById('updateOrgForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				if (!currentOrganization || !isAdmin()) {
					showMessage('You must be an admin to update the organization', 'error');
					return;
				}

				const formData = new FormData(e.target);
				const orgData = {
					name: formData.get('name'),
					logoUrl: formData.get('logoUrl') || undefined,
					primaryColor: formData.get('primaryColor'),
					secondaryColor: formData.get('secondaryColor')
				};

				try {
					await apiRequest(`https://api.gskis.com/api/organizations/${currentOrganization.id}`, {
						method: 'PUT',
						body: JSON.stringify(orgData)
					});

					showMessage('Organization updated successfully!', 'success');
					loadOrganizations();
					loadOrganizationDetails(currentOrganization.id);
				} catch (error) {
					showMessage('Failed to update organization: ' + error.message, 'error');
				}
			});

			// Add Member
			document.getElementById('addMemberForm').addEventListener('submit', async function(e) {
				e.preventDefault();
				
				if (!currentOrganization || !isAdmin()) {
					showMessage('You must be an admin to add members', 'error');
					return;
				}

				const formData = new FormData(e.target);
				const memberData = {
					userId: parseInt(formData.get('userId')),
					role: formData.get('role')
				};

				try {
					await apiRequest(`https://api.gskis.com/api/organizations/${currentOrganization.id}/members`, {
						method: 'POST',
						body: JSON.stringify(memberData)
					});

					showMessage('Member added successfully!', 'success');
					e.target.reset();
					loadOrganizationDetails(currentOrganization.id);
				} catch (error) {
					showMessage('Failed to add member: ' + error.message, 'error');
				}
			});

			// Update Member Role
			async function updateMemberRole(userId, newRole) {
				if (!currentOrganization || !isAdmin()) {
					showMessage('You must be an admin to update member roles', 'error');
					return;
				}

				try {
					await apiRequest(`https://api.gskis.com/api/organizations/${currentOrganization.id}/members/${userId}`, {
						method: 'PUT',
						body: JSON.stringify({ role: newRole })
					});

					showMessage('Member role updated successfully!', 'success');
					loadOrganizationDetails(currentOrganization.id);
				} catch (error) {
					showMessage('Failed to update member role: ' + error.message, 'error');
				}
			}

			// Remove Member
			async function removeMember(userId) {
				if (!currentOrganization || !isAdmin()) {
					showMessage('You must be an admin to remove members', 'error');
					return;
				}

				if (!confirm('Are you sure you want to remove this member?')) {
					return;
				}

				try {
					await apiRequest(`https://api.gskis.com/api/organizations/${currentOrganization.id}/members/${userId}`, {
						method: 'DELETE'
					});

					showMessage('Member removed successfully!', 'success');
					loadOrganizationDetails(currentOrganization.id);
				} catch (error) {
					showMessage('Failed to remove member: ' + error.message, 'error');
				}
			}

			// Make functions globally accessible for inline handlers
			window.updateMemberRole = updateMemberRole;
			window.removeMember = removeMember;

			// Utility function to show messages
			function showMessage(message, type) {
				const messageDiv = document.getElementById('globalMessage');
				messageDiv.innerHTML = `<div class="${type}">${message}</div>`;
				
				// Auto-hide after 5 seconds
				setTimeout(() => {
					messageDiv.innerHTML = '';
				}, 5000);
			}
		</script>
	</body>
</html>
